use "@/bus.ae"
use "@/utils.ae"

@compiler c_flag "-O"

enum Reg {
    A
    B
    C
    D
    E
    F
    H
    L
    AF
    BC
    DE
    HL
    SP
    PC
}

def Reg::from_bits(bits: u8): Reg => match bits {
    0x00 => B
    0x01 => C
    0x02 => D
    0x03 => E
    0x04 => H
    0x05 => L
    0x06 => HL
    0x07 => A
    else => panic(`Invalid value in Reg::from_bits: 0x{bits:02x}`)
}

enum Cond {
    None
    NZ
    Z
    NC
    C
}

struct CPURegisters {
    a: u8
    b: u8
    c: u8
    d: u8
    e: u8
    h: u8
    l: u8
    f: u8
    pc: u16
    sp: u16
}

def CPURegisters::af(&this): u16 => (.a as u16 << 8) | .f as u16
def CPURegisters::bc(&this): u16 => (.b as u16 << 8) | .c as u16
def CPURegisters::de(&this): u16 => (.d as u16 << 8) | .e as u16
def CPURegisters::hl(&this): u16 => (.h as u16 << 8) | .l as u16

def CPURegisters::set_af(&this, val: u16) {
    .a = (val >> 8) as u8
    .f = val as u8
}

def CPURegisters::set_bc(&this, val: u16) {
    .b = (val >> 8) as u8
    .c = val as u8
}

def CPURegisters::set_de(&this, val: u16) {
    .d = (val >> 8) as u8
    .e = val as u8
}

def CPURegisters::set_hl(&this, val: u16) {
    .h = (val >> 8) as u8
    .l = val as u8
}

def CPURegisters::get8(&this, reg: Reg): u8 => match reg {
    A => .a
    B => .b
    C => .c
    D => .d
    E => .e
    F => .f
    H => .h
    L => .l
    else => panic(`Called CPURegisters::get8 with invalid register type: Reg::{reg}`)
}

def CPURegisters::get16(&this, reg: Reg): u16 => match reg {
    AF => .af()
    BC => .bc()
    DE => .de()
    HL => .hl()
    SP => .sp
    PC => .pc
    else => panic(`Called CPURegisters::get16 with invalid register type: Reg::{reg}`)
}

def CPURegisters::set8(&this, reg: Reg, val: u8) {
    match reg {
        A => .a = val
        B => .b = val
        C => .c = val
        D => .d = val
        E => .e = val
        F => .f = val
        H => .h = val
        L => .l = val
        else => panic(`Called CPURegisters::set8 with invalid register type: Reg::{reg}`)
    }
}

def CPURegisters::set16(&this, reg: Reg, val: u16) {
    match reg {
        AF => .set_af(val)
        BC => .set_bc(val)
        DE => .set_de(val)
        HL => .set_hl(val)
        SP => .sp = val
        PC => .pc = val
        else => panic(`Called CPURegisters::set16 with invalid register type: Reg::{reg}`)
    }
}

enum InterruptType {
    VBlank
    LCDStat
    Timer
    Serial
    Joypad
}

def InterruptType::bit(this): u8 => match this {
    VBlank => 0
    LCDStat => 1
    Timer => 2
    Serial => 3
    Joypad => 4
}

struct CPU {
    bus: &Bus
    regs: CPURegisters
    clock: u64

    ime: bool
    halted: bool

    reg_ie: u8
    reg_if: u8
}

def CPU::new(bus: &Bus): &CPU {
    let cpu = calloc(1, sizeof(CPU)) as &CPU
    *cpu = CPU(
        bus: bus,
        regs: CPURegisters(
            a: 0x01,
            b: 0x00,
            c: 0x13,
            d: 0x00,
            e: 0xD8,
            h: 0x01,
            l: 0x4D,
            f: 0xB0,
            pc: 0x0100,
            sp: 0xFFFE,
        ),
        clock: 0,
        ime: false,
        halted: false,
        reg_ie: 0,
        reg_if: 0,
    )
    return cpu
}

def CPU::flag_z(&this): bool => get_bit_u8(.regs.f, 7)
def CPU::set_flag_z(&this, val: bool) { set_bit_u8(&.regs.f, 7, val) }

def CPU::flag_n(&this): bool => get_bit_u8(.regs.f, 6)
def CPU::set_flag_n(&this, val: bool) { set_bit_u8(&.regs.f, 6, val) }

def CPU::flag_h(&this): bool => get_bit_u8(.regs.f, 5)
def CPU::set_flag_h(&this, val: bool) { set_bit_u8(&.regs.f, 5, val) }

def CPU::flag_c(&this): bool => get_bit_u8(.regs.f, 4)
def CPU::set_flag_c(&this, val: bool) { set_bit_u8(&.regs.f, 4, val) }

def CPU::read(&this, addr: u16): u8 => .bus.read(addr)

def CPU::write(&this, addr: u16, data: u8) {
    .bus.write(addr, data)
}

def CPU::read_u16(&this, addr: u16): u16 {
    let lo = .read(addr) as u16
    let hi = .read(addr + 1) as u16
    return (hi << 8) | lo
}

def CPU::push_reg8(&this, reg: Reg) {
    let val = .regs.get8(reg)
    .regs.sp -= 1
    .write(.regs.sp, val)
}

def CPU::push_r16(&this, reg: Reg) {
    let val = .regs.get16(reg)
    .regs.sp -= 1
    .write(.regs.sp, (val >> 8) as u8)
    .regs.sp -= 1
    .write(.regs.sp, val as u8)
}

def CPU::check_condition(&this, cond: Cond): bool => match cond {
    None => true
    NZ => not .flag_z()
    Z => .flag_z()
    NC => not .flag_c()
    C => .flag_c()
}

def CPU::request_interrupt(&this, type: InterruptType) {
    set_bit_u8(&.reg_if, type.bit(), true)
}

const DEBUG = false

def CPU::op_nop(&this) {
    if DEBUG println("NOP")

    .clock += 4
    .regs.pc += 1
}

def CPU::op_jmp(&this, cond: Cond) {
    let addr = .read_u16(.regs.pc + 1)
    if cond == Cond::None {
        if DEBUG println("JP $%04x", addr)
    } else {
        if DEBUG println("JP %s, $%04x", cond, addr)
    }

    let should_jump = .check_condition(cond)

    if should_jump {
        .regs.pc = addr
        .clock += 16
    } else {
        .regs.pc += 3
        .clock += 12
    }
}

def CPU::op_jmp_rel(&this, cond: Cond) {
    let offset = .read(.regs.pc + 1) as i8
    if cond == Cond::None {
        if DEBUG println("JR $%02x", offset as u8)
    } else {
        if DEBUG println("JR %s, $%02x", cond, offset as u8)
    }

    let should_jump = .check_condition(cond)

    .regs.pc += 2
    if should_jump {
        .clock += 12
        .regs.pc = (.regs.pc as i16 + offset as i16) as u16
    } else {
        .clock += 8
    }
}

def CPU::op_jmp_hl(&this) {
    if DEBUG println("JP (HL)")

    .regs.pc = .regs.hl()
    .clock += 4
}


// Note for `EI`: (https://gbdev.io/pandocs/Interrupts.html)
//  > The effect of ei is delayed by one instruction. This means that ei followed
//  > immediately by di does not allow any interrupts between them. This interacts
//  > with the halt bug in an interesting way.

def CPU::op_di(&this) {
    if DEBUG println("DI")

    .ime = false

    .clock += 4
    .regs.pc += 1
}

def CPU::op_ld_r_r(&this, dst: Reg, src: Reg) {
    // Load register into register
    if DEBUG println("LD %s, %s", dst, src)

    let val = .regs.get8(src)
    .regs.set8(dst, val)

    .clock += 4
    .regs.pc += 1
}

def CPU::op_ld_r_hl(&this, dst: Reg) {
    // Load (HL) into register
    if DEBUG println("LD %s, (HL)", dst)

    let val = .read(.regs.hl())
    .regs.set8(dst, val)

    .clock += 8
    .regs.pc += 1
}

def CPU::op_ld_hl_r(&this, src: Reg) {
    // Load register into (HL)
    let val = .regs.get8(src)
    if DEBUG println("LD (HL), %s [%02X]", src, val)

    .write(.regs.hl(), val)

    .clock += 8
    .regs.pc += 1
}

def CPU::op_ld_imm_a(&this) {
    // Load A into immediate
    let addr = .read_u16(.regs.pc + 1)
    if DEBUG println("LD ($%04X), A", addr)

    .write(addr, .regs.a)

    .clock += 16
    .regs.pc += 3
}

def CPU::op_ld_r16_a(&this, dst: Reg) {
    let val = .regs.a
    if DEBUG println("LD (%s), A [$%02X]", dst, val)

    let addr = .regs.get16(dst)
    .write(addr, val)

    .clock += 8
    .regs.pc += 1
}

def CPU::op_ld_sp_hl(&this) {
    if DEBUG println("LD SP, HL")

    .regs.sp = .regs.hl()

    .clock += 8
    .regs.pc += 1
}

def CPU::op_ld_r16_imm(&this, dst: Reg) {
    let val = .read_u16(.regs.pc + 1)
    if DEBUG println("LD %s, $%04X", dst, val)

    .regs.set16(dst, val)

    .clock += 12
    .regs.pc += 3
}

def CPU::op_ld_r_imm(&this, dest: Reg) {
    let val = .read(.regs.pc + 1)
    if DEBUG println("LD %s, $%02X", dest, val)

    .regs.set8(dest, val)

    .clock += 8
    .regs.pc += 2
}

def CPU::op_ld_ff00n_a(&this) {
    let n = .read(.regs.pc + 1)
    if DEBUG println("LD (FF00+$%02X), A", n)

    let addr = (n as u16) | 0xFF00
    .write(addr, .regs.a)

    .clock += 12
    .regs.pc += 2
}

def CPU::op_ld_a_ff00n(&this) {
    let n = .read(.regs.pc + 1)
    if DEBUG println("LD A, (FF00+$%02X)", n)

    let addr = (n as u16) | 0xFF00
    .regs.a = .read(addr)

    .clock += 12
    .regs.pc += 2
}

def CPU::op_ld_ff00c_a(&this) {
    let addr = (.regs.c as u16) | 0xFF00
    if DEBUG println("LD (FF00+C [%04X]), A", addr)

    .write(addr, .regs.a)

    .clock += 8
    .regs.pc += 1
}

def CPU::op_ld_a_ff00c(&this) {
    let addr = (.regs.c as u16) | 0xFF00
    if DEBUG println("LD A, (FF00+C [%04x])", addr)

    .regs.a = .read(addr)

    .clock += 8
    .regs.pc += 1
}

def CPU::op_ldi_hl_a(&this, inc: i16) {
    if inc > 0 {
        if DEBUG println("LDI (HL), A")
    } else {
        if DEBUG println("LDD (HL), A")
    }

    .write(.regs.hl(), .regs.a)

    let new_hl = ((.regs.hl() as i16) + inc) as u16
    .regs.set_hl(new_hl)

    .clock += 8
    .regs.pc += 1
}

def CPU::op_ldi_a_hl(&this, inc: i16) {
    if inc > 0 {
        if DEBUG println("LDI A, (HL)")
    } else {
        if DEBUG println("LDD A, (HL)")
    }

    .regs.a = .read(.regs.hl())

    let new_hl = ((.regs.hl() as i16) + inc) as u16
    .regs.set_hl(new_hl)

    .clock += 8
    .regs.pc += 1
}

def CPU::op_ld_a_imm16(&this) {
    let addr = .read_u16(.regs.pc + 1)
    if DEBUG println("LD A, ($%04X)", addr)

    .regs.a = .read(addr)

    .clock += 16
    .regs.pc += 3
}

def CPU::op_ld_r_r16(&this, dst: Reg, src: Reg) {
    let addr = .regs.get16(src)
    if DEBUG println("LD %s, (%s [%04X])", dst, src, addr)

    .regs.set8(dst, .read(addr))

    .clock += 8
    .regs.pc += 1
}

def CPU::op_ld_hl_spn(&this) {
    let n = .read(.regs.pc + 1) as i8 as i32
    if DEBUG println("LD HL, SP + $%02X", n)

    let sp = .regs.sp as i16 as i32
    let result = sp + n
    .regs.set_hl(result as u16)

    .set_flag_z(false)
    .set_flag_n(false)
    .set_flag_h((sp & 0xF) + (n & 0xF) > 0xF)
    .set_flag_c((sp & 0xFF) + (n & 0xFF) > 0xFF)


    .clock += 12
    .regs.pc += 2
}

def CPU::op_ld_imm16_sp(&this) {
    let addr = .read_u16(.regs.pc + 1)
    if DEBUG println("LD ($%04X), SP", addr)

    let val = .regs.sp
    .write(addr, (val & 0xFF) as u8)
    .write(addr + 1, (val >> 8) as u8)

    .clock += 20
    .regs.pc += 3
}

def CPU::op_ld_mem_hl_imm(&this) {
    let addr = .regs.hl()
    let val = .read(.regs.pc + 1)
    if DEBUG println("LD (HL [$%04X]), $%02X", addr, val)

    .write(addr, val)

    .clock += 12
    .regs.pc += 2
}

def CPU::op_push16(&this, src: Reg) {
    // Push 16-bit register onto stack
    if DEBUG println("PUSH %s", src)

    .push_r16(src)

    .clock += 16
    .regs.pc += 1
}


// FIXME: When popping AF, the upper byte should be 0?

def CPU::op_pop16(&this, dst: Reg) {
    // Pop 16-bit register from stack
    if DEBUG println("POP %s", dst)

    let val = .read_u16(.regs.sp)

    if dst == Reg::AF {
        // The upper byte of AF is always 0
        val = val & 0xFFF0
    }

    .regs.set16(dst, val)
    .regs.sp += 2

    .clock += 12
    .regs.pc += 1
}

def CPU::op_alu_r(&this, handler: fn(&CPU, u8), src: Reg) {
    if src == Reg::HL {
        let val = .read(.regs.hl())
        handler(this, val)
        if DEBUG println(" (HL [%02X])", val)
        .clock += 8
    } else {
        let val = .regs.get8(src)
        handler(this, val)
        if DEBUG println(" %s [%02X]", src, val)
        .clock += 4
    }
    .regs.pc += 1
}

def CPU::op_alu_imm(&this, handler: fn(&CPU, u8)) {
    let val = .read(.regs.pc + 1)

    handler(this, val)
    if DEBUG println(" $%02X", val)

    .clock += 8
    .regs.pc += 2
}

def CPU::op_inc_r16(&this, reg: Reg, offset: i16) {
    // Increment 16-bit register
    if offset > 0 {
        if DEBUG println("INC %s", reg)
    } else {
        if DEBUG println("DEC %s", reg)
    }

    let val = .regs.get16(reg)
    let new_val = ((val as i16) + offset) as u16
    .regs.set16(reg, new_val)

    .clock += 8
    .regs.pc += 1
}

def CPU::op_inc_r(&this, reg: Reg, offset: i8) {
    // Increment 8-bit register
    if offset > 0 {
        if DEBUG println("INC %s", reg)
    } else {
        if DEBUG println("DEC %s", reg)
    }

    let prev = .regs.get8(reg) as i8
    let val = (prev + offset) as u8
    .regs.set8(reg, val)

    .set_flag_z(val == 0)
    .set_flag_n(offset < 0)

    if offset > 0 {
        .set_flag_h((val & 0x0F) == 0x00)
    } else {
        .set_flag_h((val & 0x0F) == 0x0f)
    }

    .clock += 4
    .regs.pc += 1
}

def CPU::op_inc_mem_hl(&this, offset: i8) {
    // Increment memory at (HL)
    if offset > 8 {
        if DEBUG println("INC (HL)")
    } else {
        if DEBUG println("DEC (HL)")
    }

    let prev = .read(.regs.hl()) as i16
    let off = offset as i16
    let val = (prev + off) as u8
    .write(.regs.hl(), val)

    .set_flag_z(val == 0)
    .set_flag_n(offset < 0)
    if offset > 0 {
        .set_flag_h((val & 0x0F) == 0x00)
    } else {
        .set_flag_h((val & 0x0F) == 0x0f)
    }

    .clock += 12
    .regs.pc += 1
}

def CPU::op_halt(&this) {
    if DEBUG println("HALT")

    .halted = true

    .clock += 4
    .regs.pc += 1
}

def CPU::op_call(&this, cond: Cond) {
    let addr = .read_u16(.regs.pc + 1)
    if cond == Cond::None {
        if DEBUG println("CALL $%04X", addr)
    } else {
        if DEBUG println("CALL %s, $%04X", cond, addr)
    }

    let should_call = .check_condition(cond)

    .regs.pc += 3
    if should_call {
        .push_r16(Reg::PC)
        .clock += 24
        .regs.pc = addr
    } else {
        .clock += 12
    }
}

def CPU::op_ret(&this, cond: Cond) {
    if cond == Cond::None {
        if DEBUG println("RET")
    } else {
        if DEBUG println("RET %s", cond)
    }

    let should_jump = match cond {
        Cond::None => true,
        Cond::NZ => not .flag_z(),
        Cond::Z => .flag_z(),
        Cond::NC => not .flag_c(),
        Cond::C => .flag_c(),
    }

    if should_jump {
        let ret_addr = .read_u16(.regs.sp)
        .regs.sp += 2

        if cond == Cond::None {
            .clock += 16
        } else {
            .clock += 20
        }
        .regs.pc = ret_addr
    } else {
        .clock += 8
        .regs.pc += 1
    }
}

def CPU::op_reti(&this) {
    .op_ret(Cond::None)
    // FIXME: Should there be a delay here?
    .ime = true
}

def CPU::op_rst(&this, addr: u16) {
    if DEBUG println("RST $%02X", addr)
    let val = .regs.pc + 1

    .regs.sp -= 1
    .write(.regs.sp, (val >> 8) as u8)
    .regs.sp -= 1
    .write(.regs.sp, (val & 0xFF) as u8)

    .regs.pc = addr
    .clock += 16
}

def CPU::op_rrca(&this) {
    if DEBUG println("RRCA")
    let val = .regs.a
    let new_c = val & 1
    let res = (val >> 1) | (new_c << 7)

    .set_flag_z(false)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(new_c == 1)

    .regs.a = res
    .clock += 4
    .regs.pc += 1
}

def CPU::op_rra(&this) {
    if DEBUG println("RRA")
    let val = .regs.a
    let carry = .flag_c() as u8
    let new_c = val & 1
    let res = (val >> 1) | (carry << 7)

    .set_flag_z(false)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(new_c == 1)

    .regs.a = res
    .clock += 4
    .regs.pc += 1
}

def CPU::op_rlca(&this) {
    if DEBUG println("RLCA")
    let val = .regs.a
    let new_c = (val >> 7) & 1
    let res = (val << 1) | new_c

    .set_flag_z(false)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(new_c == 1)

    .regs.a = res
    .clock += 4
    .regs.pc += 1
}

def CPU::op_rla(&this) {
    if DEBUG println("RLA")
    let val = .regs.a
    let carry = .flag_c() as u8
    let new_c = (val >> 7) & 1
    let res = (val << 1) | carry

    .set_flag_z(false)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(new_c == 1)

    .regs.a = res
    .clock += 4
    .regs.pc += 1
}

def CPU::op_add_hl_r16(&this, reg: Reg) {
    if DEBUG println("ADD HL, %s", reg)
    let val = .regs.get16(reg) as u32
    let hl = .regs.hl() as u32
    let result = hl + val

    .set_flag_n(false)
    // FIXME: this is likely not right
    .set_flag_h((val & 0x0FFFu32) + (hl & 0x0FFFu32) > 0x0FFFu32)
    .set_flag_c(result > 0xFFFFu32)

    .regs.set_hl(result as u16)

    .clock += 8
    .regs.pc += 1
}

def CPU::op_add_sp_imm(&this) {
    let val = .read(.regs.pc + 1) as i8 as i32
    if DEBUG println("ADD SP, $%02X", val)
    let sp = .regs.sp as i32
    let result = sp + val

    .set_flag_z(false)
    .set_flag_n(false)
    .set_flag_h(((sp & 0x0Fi32) + (val & 0x0Fi32)) > 0x0Fi32)
    .set_flag_c(((sp & 0xFFi32) + (val & 0xFFi32)) > 0xFFi32)

    .regs.sp = result as u16

    .clock += 16
    .regs.pc += 2
}

def CPU::op_cpl(&this) {
    if DEBUG println("CPL")
    .regs.a = ~.regs.a
    .set_flag_n(true)
    .set_flag_h(true)
    .clock += 4
    .regs.pc += 1
}

def CPU::op_scf(&this) {
    if DEBUG println("SCF")
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(true)
    .clock += 4
    .regs.pc += 1
}

def CPU::op_ccf(&this) {
    if DEBUG println("CCF")
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(not .flag_c())
    .clock += 4
    .regs.pc += 1
}

def CPU::op_daa(&this) {
    if DEBUG println("DAA")
    let u: u8 = 0
    let carry = false

    if .flag_h() or (not .flag_n() and (.regs.a & 0xF) > 9) {
        u = 0x6
    }

    if .flag_c() or (not .flag_n() and .regs.a > 0x99) {
        u = u | 0x60
        carry = true
    }

    if .flag_n() {
        .regs.a -= u
    } else {
        .regs.a += u
    }

    .set_flag_z(.regs.a == 0)
    .set_flag_h(false)
    .set_flag_c(carry)

    .clock += 4
    .regs.pc += 1
}

def CPU::op_ei(&this) {
    if DEBUG println("EI")
    // FIXME: delayed interrupt enable
    .ime = true
    .clock += 4
    .regs.pc += 1
}

// This is a hack to get around the fact that we can't pass
// unbound methods

def ALU_CP(cpu: &CPU, val: u8) {
    if DEBUG print("CP")
    // This is a hack to avoid sign-extending
    let a = (cpu.regs.a as u16) as i16
    let b = (val as u16) as i16
    let result = a - b

    cpu.set_flag_z(result == 0)
    cpu.set_flag_n(true)
    cpu.set_flag_h((a & 0xF) - (b & 0xF) < 0)
    cpu.set_flag_c(result < 0)
}

def ALU_AND(cpu: &CPU, val: u8) {
    if DEBUG print("AND")
    let result = cpu.regs.a & val

    cpu.set_flag_z(result == 0)
    cpu.set_flag_n(false)
    cpu.set_flag_h(true)
    cpu.set_flag_c(false)

    cpu.regs.a = result
}

def ALU_OR(cpu: &CPU, val: u8) {
    if DEBUG print("OR")
    let result = cpu.regs.a | val

    cpu.set_flag_z(result == 0)
    cpu.set_flag_n(false)
    cpu.set_flag_h(false)
    cpu.set_flag_c(false)

    cpu.regs.a = result
}

def ALU_XOR(cpu: &CPU, val: u8) {
    if DEBUG print("XOR")
    let result = cpu.regs.a ^ val

    cpu.set_flag_z(result == 0)
    cpu.set_flag_n(false)
    cpu.set_flag_h(false)
    cpu.set_flag_c(false)

    cpu.regs.a = result
}


def ALU_ADD(cpu: &CPU, val: u8) {
    if DEBUG print("ADD")
    let a = cpu.regs.a as u16
    let b = val as u16
    let result = a + b

    cpu.set_flag_z(result as u8 == 0)
    cpu.set_flag_n(false)
    cpu.set_flag_h((a & 0xF) + (b & 0xF) > 0xF)
    cpu.set_flag_c(result > 0xFF)

    cpu.regs.a = result as u8
}

def ALU_ADDC(cpu: &CPU, val: u8) {
    if DEBUG print("ADDC")
    let a = cpu.regs.a as u16
    let b = val as u16
    let c = cpu.flag_c() as u16
    let result = a + b + c

    cpu.set_flag_z(result as u8 == 0)
    cpu.set_flag_n(false)
    cpu.set_flag_h((a & 0xF) + (b & 0xF) + c > 0xF)
    cpu.set_flag_c(result > 0xFF)

    cpu.regs.a = result as u8
}

def ALU_SUB(cpu: &CPU, val: u8) {
    // FIXME: is stuff breaking here becuase of the signed/unsigned types?
    if DEBUG print("SUB")
    let a = cpu.regs.a as i16
    let b = val as i16
    let result = a - b

    cpu.set_flag_z(result as u8 == 0)
    cpu.set_flag_n(true)
    cpu.set_flag_h((a & 0xF) - (b & 0xF) < 0)
    cpu.set_flag_c(result < 0)

    cpu.regs.a = result as u8
}

def ALU_SUBC(cpu: &CPU, val: u8) {
    if DEBUG print("SUBC")
    let a = cpu.regs.a as i16
    let b = val as i16
    let c = cpu.flag_c() as i16
    let result = a - b - c

    cpu.set_flag_z(result as u8 == 0)
    cpu.set_flag_n(true)
    cpu.set_flag_h((a & 0xF) - (b & 0xF) - c < 0)
    cpu.set_flag_c(result < 0)

    cpu.regs.a = result as u8
}

def CPU::op_bit(&this, bit: u8, reg: Reg) {
    if DEBUG println("BIT %d, %s", bit, reg)

    let val = if reg == Reg::HL {
        .clock += 12
        yield .read(.regs.hl())
    } else {
        .clock += 8
        yield .regs.get8(reg)
    }

    .set_flag_z(not get_bit_u8(val, bit))
    .set_flag_n(false)
    .set_flag_h(true)

    .regs.pc += 2
}


def CPU::op_set_bit(&this, bit: u8, reg: Reg, val: bool) {
    if val {
        if DEBUG println("SET %d, %s", bit, reg)
    } else {
        if DEBUG println("RES %d, %s", bit, reg)
    }

    if reg == Reg::HL {
        let mem = .read(.regs.hl())
        set_bit_u8(&mem, bit, val)
        .write(.regs.hl(), mem)
        .clock += 16
        .regs.pc += 2

    } else {
        let mem = .regs.get8(reg)
        set_bit_u8(&mem, bit, val)
        .regs.set8(reg, mem)
        .clock += 8
        .regs.pc += 2
    }
}

def CPU::op_rrc(&this, reg: Reg) {
    if DEBUG println("RRC %s", reg)
    let val = match reg {
        HL => .read(.regs.hl())
        else => .regs.get8(reg)
    }
    let new_c = val & 1
    let res = (val >> 1) | (new_c << 7)

    .set_flag_z(res == 0)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(new_c == 1)

    if reg == Reg::HL {
        .write(.regs.hl(), res)
        .clock += 16
    } else {
        .regs.set8(reg, res)
        .clock += 8
    }
    .regs.pc += 2
}

def CPU::op_rr(&this, reg: Reg) {
    if DEBUG println("RR %s", reg)
    let val = match reg {
        HL => .read(.regs.hl())
        else => .regs.get8(reg)
    }
    let carry = .flag_c() as u8
    let new_c = val & 1
    let res = (val >> 1) | (carry << 7)

    .set_flag_z(res == 0)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(new_c == 1)

    if reg == Reg::HL {
        .write(.regs.hl(), res)
        .clock += 16
    } else {
        .regs.set8(reg, res)
        .clock += 8
    }
    .regs.pc += 2
}

def CPU::op_rlc(&this, reg: Reg) {
    if DEBUG println("RLC %s", reg)
    let val = match reg {
        HL => .read(.regs.hl())
        else => .regs.get8(reg)
    }
    let new_c = (val >> 7) & 1
    let res = (val << 1) | new_c

    .set_flag_z(res == 0)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(new_c == 1)

    if reg == Reg::HL {
        .write(.regs.hl(), res)
        .clock += 16
    } else {
        .regs.set8(reg, res)
        .clock += 8
    }
    .regs.pc += 2
}

def CPU::op_rl(&this, reg: Reg) {
    if DEBUG println("RL %s", reg)

    let val = match reg {
        HL => .read(.regs.hl())
        else => .regs.get8(reg)
    }
    let carry = .flag_c() as u8
    let new_c = (val >> 7) & 1
    let res = (val << 1) | carry

    .set_flag_z(res == 0)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(new_c == 1)

    if reg == Reg::HL {
        .write(.regs.hl(), res)
        .clock += 16
    } else {
        .regs.set8(reg, res)
        .clock += 8
    }
    .regs.pc += 2
}

def CPU::op_sla(&this, reg: Reg) {
    if DEBUG println("SLA %s", reg)
    let val = match reg {
        HL => .read(.regs.hl())
        else => .regs.get8(reg)
    }
    let new_c = val >> 7
    let res = val << 1

    .set_flag_z(res == 0)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(new_c == 1)

    if reg == Reg::HL {
        .write(.regs.hl(), res)
        .clock += 16
    } else {
        .regs.set8(reg, res)
        .clock += 8
    }
    .regs.pc += 2
}

def CPU::op_sra(&this, reg: Reg) {
    if DEBUG println("SRA %s", reg)
    let val = match reg {
        HL => .read(.regs.hl())
        else => .regs.get8(reg)
    }

    let res = (val >> 1) | (val & 0x80)
    .set_flag_z(res == 0)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(val & 0x1 != 0)

    if reg == Reg::HL {
        .write(.regs.hl(), res)
        .clock += 16
    } else {
        .regs.set8(reg, res)
        .clock += 8
    }
    .regs.pc += 2
}

def CPU::op_swap(&this, reg: Reg) {
    if DEBUG println("SWAP %s", reg)
    let val = match reg {
        HL => .read(.regs.hl())
        else => .regs.get8(reg)
    }

    let res = (val >> 4) | (val << 4)
    .set_flag_z(res == 0)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(false)

    if reg == Reg::HL {
        .write(.regs.hl(), res)
        .clock += 16
    } else {
        .regs.set8(reg, res)
        .clock += 8
    }
    .regs.pc += 2
}

def CPU::op_srl(&this, reg: Reg) {
    if DEBUG println("SRL %s", reg)
    let val = match reg {
        HL => .read(.regs.hl())
        else => .regs.get8(reg)
    }

    let res = (val >> 1)
    .set_flag_z(res == 0)
    .set_flag_n(false)
    .set_flag_h(false)
    .set_flag_c(val & 0x1 != 0)

    if reg == Reg::HL {
        .write(.regs.hl(), res)
        .clock += 16
    } else {
        .regs.set8(reg, res)
        .clock += 8
    }
    .regs.pc += 2
}

def CPU::handle_cb_instruction(&this) {
    let cb_opcode = .read(.regs.pc + 1)
    if DEBUG print("(%02x): ", cb_opcode)

    let reg = Reg::from_bits(cb_opcode & 0b111)
    let bit = (cb_opcode >> 3) & 0b111 // Only for BIT, RES, SET

    match cb_opcode >> 4 {
        0x4 | 0x5 | 0x6 | 0x7 => .op_bit(bit, reg)
        0x8 | 0x9 | 0xa | 0xb => {
            .op_set_bit(bit, reg, false)
        }
        0xc | 0xd | 0xe | 0xf => {
            let bit = (cb_opcode >> 3) & 0b111
            .op_set_bit(bit, reg, true)
        }
        else => match cb_opcode >> 3 {
            0x0 => .op_rlc(reg)
            0x1 => .op_rrc(reg)
            0x2 => .op_rl(reg)
            0x3 => .op_rr(reg)
            0x4 => .op_sla(reg)
            0x5 => .op_sra(reg)
            0x6 => .op_swap(reg)
            0x7 => .op_srl(reg)
            else => panic("Invalid CB opcode")
        }
    }
}

const TRACK_INSTS = false
let seen_insts: [bool; 256]
let inst_count: i64

def CPU::dump_state(&this) {
    let opcode = .read(.regs.pc)
    print("0x%04X: %02X  (%02X %02X)  ", .regs.pc, opcode, .read(.regs.pc + 1), .read(.regs.pc + 2))
    print("%s", if .flag_z() then "Z" else "-");
    print("%s", if .flag_n() then "N" else "-");
    print("%s", if .flag_h() then "H" else "-");
    print("%s", if .flag_c() then "C" else "-");

    print(" A:%02X", .regs.a);
    print(" B:%02X", .regs.b);
    print(" C:%02X", .regs.c);
    print(" D:%02X", .regs.d);
    print(" E:%02X", .regs.e);
    print(" H:%02X", .regs.h);
    print(" L:%02X", .regs.l);
    print(" SP:%04X", .regs.sp);
    print(" PC:%04X", .regs.pc);

    print("  IME:%02X", .ime);
    print("\n");
}

def CPU::handle_instruction(&this) {
    let opcode = .read(.regs.pc)

    if TRACK_INSTS {
        // if not seen_insts[opcode] {
        //     seen_insts[opcode] = true
        //     .dump_state()
        // }
        let MIN = 100000i64
        let MAX = MIN + 100000
        if inst_count >= MIN and inst_count < MAX {
            .dump_state()
        } else if inst_count >= MAX {
            exit(0)
        }
        inst_count += 1
    }


    if DEBUG print("0x%04x: (%02x): ", .regs.pc, opcode)
    match opcode {
        // 0x0y
        0x00 => .op_nop()
        0x01 => .op_ld_r16_imm(Reg::BC)
        0x02 => .op_ld_r16_a(Reg::BC)
        0x03 => .op_inc_r16(Reg::BC, offset: 1)
        0x04 => .op_inc_r(Reg::B, offset: 1)
        0x05 => .op_inc_r(Reg::B, offset: -1)
        0x06 => .op_ld_r_imm(Reg::B)
        0x07 => .op_rlca()
        0x08 => .op_ld_imm16_sp()
        0x09 => .op_add_hl_r16(Reg::BC)
        0x0a => .op_ld_r_r16(Reg::A, Reg::BC)
        0x0b => .op_inc_r16(Reg::BC, offset: -1)
        0x0c => .op_inc_r(Reg::C, offset: 1)
        0x0d => .op_inc_r(Reg::C, offset: -1)
        0x0e => .op_ld_r_imm(Reg::C)
        0x0f => .op_rrca()

        // 0x1y
        0x11 => .op_ld_r16_imm(Reg::DE)
        0x12 => .op_ld_r16_a(Reg::DE)
        0x13 => .op_inc_r16(Reg::DE, offset: 1)
        0x14 => .op_inc_r(Reg::D, offset: 1)
        0x15 => .op_inc_r(Reg::D, offset: -1)
        0x16 => .op_ld_r_imm(Reg::D)
        0x17 => .op_rla()
        0x18 => .op_jmp_rel(Cond::None)
        0x19 => .op_add_hl_r16(Reg::DE)
        0x1a => .op_ld_r_r16(dst: Reg::A, src: Reg::DE)
        0x1b => .op_inc_r16(Reg::DE, offset: -1)
        0x1c => .op_inc_r(Reg::E, offset: 1)
        0x1d => .op_inc_r(Reg::E, offset: -1)
        0x1e => .op_ld_r_imm(Reg::E)
        0x1f => .op_rra()

        // 0x2y
        0x20 => .op_jmp_rel(Cond::NZ)
        0x21 => .op_ld_r16_imm(Reg::HL)
        0x22 => .op_ldi_hl_a(inc: 1)
        0x23 => .op_inc_r16(Reg::HL, offset: 1)
        0x24 => .op_inc_r(Reg::H, offset: 1)
        0x25 => .op_inc_r(Reg::H, offset: -1)
        0x26 => .op_ld_r_imm(Reg::H)
        0x27 => .op_daa()
        0x28 => .op_jmp_rel(Cond::Z)
        0x29 => .op_add_hl_r16(Reg::HL)
        0x2a => .op_ldi_a_hl(inc: 1)
        0x2b => .op_inc_r16(Reg::HL, offset: -1)
        0x2c => .op_inc_r(Reg::L, offset: 1)
        0x2d => .op_inc_r(Reg::L, offset: -1)
        0x2e => .op_ld_r_imm(Reg::L)
        0x2f => .op_cpl()

        // 0x3y
        0x30 => .op_jmp_rel(Cond::NC)
        0x31 => .op_ld_r16_imm(Reg::SP)
        0x32 => .op_ldi_hl_a(inc: -1)
        0x33 => .op_inc_r16(Reg::SP, offset: 1)
        0x34 => .op_inc_mem_hl(offset: 1)
        0x35 => .op_inc_mem_hl(offset: -1)
        0x36 => .op_ld_mem_hl_imm()
        0x37 => .op_scf()
        0x38 => .op_jmp_rel(Cond::C)
        0x39 => .op_add_hl_r16(Reg::SP)
        0x3a => .op_ldi_a_hl(inc: -1)
        0x3b => .op_inc_r16(Reg::SP, offset: -1)
        0x3c => .op_inc_r(Reg::A, offset: 1)
        0x3d => .op_inc_r(Reg::A, offset: -1)
        0x3e => .op_ld_r_imm(Reg::A)
        0x3f => .op_ccf()

        // 0x4y
        0x40 => .op_ld_r_r(dst: Reg::B, src: Reg::B)
        0x41 => .op_ld_r_r(dst: Reg::B, src: Reg::C)
        0x42 => .op_ld_r_r(dst: Reg::B, src: Reg::D)
        0x43 => .op_ld_r_r(dst: Reg::B, src: Reg::E)
        0x44 => .op_ld_r_r(dst: Reg::B, src: Reg::H)
        0x45 => .op_ld_r_r(dst: Reg::B, src: Reg::L)
        0x46 => .op_ld_r_hl(dst: Reg::B)
        0x47 => .op_ld_r_r(dst: Reg::B, src: Reg::A)
        0x48 => .op_ld_r_r(dst: Reg::C, src: Reg::B)
        0x49 => .op_ld_r_r(dst: Reg::C, src: Reg::C)
        0x4a => .op_ld_r_r(dst: Reg::C, src: Reg::D)
        0x4b => .op_ld_r_r(dst: Reg::C, src: Reg::E)
        0x4c => .op_ld_r_r(dst: Reg::C, src: Reg::H)
        0x4d => .op_ld_r_r(dst: Reg::C, src: Reg::L)
        0x4e => .op_ld_r_hl(Reg::C)
        0x4f => .op_ld_r_r(dst: Reg::C, src: Reg::A)

        // 0x5y
        0x50 => .op_ld_r_r(dst: Reg::D, src: Reg::B)
        0x51 => .op_ld_r_r(dst: Reg::D, src: Reg::C)
        0x52 => .op_ld_r_r(dst: Reg::D, src: Reg::D)
        0x53 => .op_ld_r_r(dst: Reg::D, src: Reg::E)
        0x54 => .op_ld_r_r(dst: Reg::D, src: Reg::H)
        0x55 => .op_ld_r_r(dst: Reg::D, src: Reg::L)
        0x56 => .op_ld_r_hl(Reg::D)
        0x57 => .op_ld_r_r(dst: Reg::D, src: Reg::A)
        0x58 => .op_ld_r_r(dst: Reg::E, src: Reg::B)
        0x59 => .op_ld_r_r(dst: Reg::E, src: Reg::C)
        0x5a => .op_ld_r_r(dst: Reg::E, src: Reg::D)
        0x5b => .op_ld_r_r(dst: Reg::E, src: Reg::E)
        0x5c => .op_ld_r_r(dst: Reg::E, src: Reg::H)
        0x5d => .op_ld_r_r(dst: Reg::E, src: Reg::L)
        0x5e => .op_ld_r_hl(Reg::E)
        0x5f => .op_ld_r_r(dst: Reg::E, src: Reg::A)

        // 0x6y
        0x60 => .op_ld_r_r(dst: Reg::H, src: Reg::B)
        0x61 => .op_ld_r_r(dst: Reg::H, src: Reg::C)
        0x62 => .op_ld_r_r(dst: Reg::H, src: Reg::D)
        0x63 => .op_ld_r_r(dst: Reg::H, src: Reg::E)
        0x64 => .op_ld_r_r(dst: Reg::H, src: Reg::H)
        0x65 => .op_ld_r_r(dst: Reg::H, src: Reg::L)
        0x66 => .op_ld_r_hl(Reg::H)
        0x67 => .op_ld_r_r(dst: Reg::H, src: Reg::A)
        0x68 => .op_ld_r_r(dst: Reg::L, src: Reg::B)
        0x69 => .op_ld_r_r(dst: Reg::L, src: Reg::C)
        0x6a => .op_ld_r_r(dst: Reg::L, src: Reg::D)
        0x6b => .op_ld_r_r(dst: Reg::L, src: Reg::E)
        0x6c => .op_ld_r_r(dst: Reg::L, src: Reg::H)
        0x6d => .op_ld_r_r(dst: Reg::L, src: Reg::L)
        0x6e => .op_ld_r_hl(Reg::L)
        0x6f => .op_ld_r_r(dst: Reg::L, src: Reg::A)

        // 0x7y
        0x70 => .op_ld_hl_r(src: Reg::B)
		0x71 => .op_ld_hl_r(src: Reg::C)
		0x72 => .op_ld_hl_r(src: Reg::D)
		0x73 => .op_ld_hl_r(src: Reg::E)
		0x74 => .op_ld_hl_r(src: Reg::H)
		0x75 => .op_ld_hl_r(src: Reg::L)
		0x76 => .op_halt()
		0x77 => .op_ld_hl_r(src: Reg::A)
        0x78 => .op_ld_r_r(dst: Reg::A, src: Reg::B)
		0x79 => .op_ld_r_r(dst: Reg::A, src: Reg::C)
		0x7a => .op_ld_r_r(dst: Reg::A, src: Reg::D)
		0x7b => .op_ld_r_r(dst: Reg::A, src: Reg::E)
		0x7c => .op_ld_r_r(dst: Reg::A, src: Reg::H)
		0x7d => .op_ld_r_r(dst: Reg::A, src: Reg::L)
        0x7e => .op_ld_r_hl(Reg::A)
        0x7f => .op_ld_r_r(dst: Reg::A, src: Reg::A)

        // 0x8y
        0x80 => .op_alu_r(ALU_ADD, Reg::B)
        0x81 => .op_alu_r(ALU_ADD, Reg::C)
        0x82 => .op_alu_r(ALU_ADD, Reg::D)
        0x83 => .op_alu_r(ALU_ADD, Reg::E)
        0x84 => .op_alu_r(ALU_ADD, Reg::H)
        0x85 => .op_alu_r(ALU_ADD, Reg::L)
        0x86 => .op_alu_r(ALU_ADD, Reg::HL)
        0x87 => .op_alu_r(ALU_ADD, Reg::A)
        0x88 => .op_alu_r(ALU_ADDC, Reg::B)
        0x89 => .op_alu_r(ALU_ADDC, Reg::C)
        0x8a => .op_alu_r(ALU_ADDC, Reg::D)
        0x8b => .op_alu_r(ALU_ADDC, Reg::E)
        0x8c => .op_alu_r(ALU_ADDC, Reg::H)
        0x8d => .op_alu_r(ALU_ADDC, Reg::L)
        0x8e => .op_alu_r(ALU_ADDC, Reg::HL)
        0x8f => .op_alu_r(ALU_ADDC, Reg::A)

        // 0x9y
        0x90 => .op_alu_r(ALU_SUB, Reg::B)
        0x91 => .op_alu_r(ALU_SUB, Reg::C)
        0x92 => .op_alu_r(ALU_SUB, Reg::D)
        0x93 => .op_alu_r(ALU_SUB, Reg::E)
        0x94 => .op_alu_r(ALU_SUB, Reg::H)
        0x95 => .op_alu_r(ALU_SUB, Reg::L)
        0x96 => .op_alu_r(ALU_SUB, Reg::HL)
        0x97 => .op_alu_r(ALU_SUB, Reg::A)
        0x98 => .op_alu_r(ALU_SUBC, Reg::B)
        0x99 => .op_alu_r(ALU_SUBC, Reg::C)
        0x9a => .op_alu_r(ALU_SUBC, Reg::D)
        0x9b => .op_alu_r(ALU_SUBC, Reg::E)
        0x9c => .op_alu_r(ALU_SUBC, Reg::H)
        0x9d => .op_alu_r(ALU_SUBC, Reg::L)
        0x9e => .op_alu_r(ALU_SUBC, Reg::HL)
        0x9f => .op_alu_r(ALU_SUBC, Reg::A)


        // 0xay
        0xa0 => .op_alu_r(ALU_AND, Reg::B)
        0xa1 => .op_alu_r(ALU_AND, Reg::C)
        0xa2 => .op_alu_r(ALU_AND, Reg::D)
        0xa3 => .op_alu_r(ALU_AND, Reg::E)
        0xa4 => .op_alu_r(ALU_AND, Reg::H)
        0xa5 => .op_alu_r(ALU_AND, Reg::L)
        0xa6 => .op_alu_r(ALU_AND, Reg::HL)
        0xa7 => .op_alu_r(ALU_AND, Reg::A)
        0xa8 => .op_alu_r(ALU_XOR, Reg::B)
        0xa9 => .op_alu_r(ALU_XOR, Reg::C)
        0xaa => .op_alu_r(ALU_XOR, Reg::D)
        0xab => .op_alu_r(ALU_XOR, Reg::E)
        0xac => .op_alu_r(ALU_XOR, Reg::H)
        0xad => .op_alu_r(ALU_XOR, Reg::L)
        0xae => .op_alu_r(ALU_XOR, Reg::HL)
        0xaf => .op_alu_r(ALU_XOR, Reg::A)

        // 0xby
        0xb0 => .op_alu_r(ALU_OR, Reg::B)
        0xb1 => .op_alu_r(ALU_OR, Reg::C)
        0xb2 => .op_alu_r(ALU_OR, Reg::D)
        0xb3 => .op_alu_r(ALU_OR, Reg::E)
        0xb4 => .op_alu_r(ALU_OR, Reg::H)
        0xb5 => .op_alu_r(ALU_OR, Reg::L)
        0xb6 => .op_alu_r(ALU_OR, Reg::HL)
        0xb7 => .op_alu_r(ALU_OR, Reg::A)
        0xb8 => .op_alu_r(ALU_CP, Reg::B)
        0xb9 => .op_alu_r(ALU_CP, Reg::C)
        0xba => .op_alu_r(ALU_CP, Reg::D)
        0xbb => .op_alu_r(ALU_CP, Reg::E)
        0xbc => .op_alu_r(ALU_CP, Reg::H)
        0xbd => .op_alu_r(ALU_CP, Reg::L)
        0xbe => .op_alu_r(ALU_CP, Reg::HL)
        0xbf => .op_alu_r(ALU_CP, Reg::A)

        // 0xcy
        0xc0 => .op_ret(Cond::NZ)
        0xc1 => .op_pop16(Reg::BC)
        0xc2 => .op_jmp(Cond::NZ)
        0xc3 => .op_jmp(Cond::None)
        0xc4 => .op_call(Cond::NZ)
        0xc5 => .op_push16(Reg::BC)
        0xc6 => .op_alu_imm(ALU_ADD)
        0xc7 => .op_rst(addr: 0x00)
        0xc8 => .op_ret(Cond::Z)
        0xc9 => .op_ret(Cond::None)
        0xca => .op_jmp(Cond::Z)
        0xcb => .handle_cb_instruction()
        0xcc => .op_call(Cond::Z)
        0xcd => .op_call(Cond::None)
        0xce => .op_alu_imm(ALU_ADDC)
        0xcf => .op_rst(addr: 0x08)

        // 0xdy
        0xd0 => .op_ret(Cond::NC)
        0xd1 => .op_pop16(Reg::DE)
        0xd2 => .op_jmp(Cond::NC)
        0xd4 => .op_call(Cond::NC)
        0xd5 => .op_push16(Reg::DE)
        0xd6 => .op_alu_imm(ALU_SUB)
        0xd7 => .op_rst(addr: 0x10)
        0xd8 => .op_ret(Cond::C)
        0xd9 => .op_reti()
        0xda => .op_jmp(Cond::C)
        0xdc => .op_call(Cond::C)
        0xde => .op_alu_imm(ALU_SUBC)
        0xdf => .op_rst(addr: 0x18)

        // 0xey
        0xe0 => .op_ld_ff00n_a()
        0xe1 => .op_pop16(Reg::HL)
        0xe2 => .op_ld_ff00c_a()

        0xe5 => .op_push16(Reg::HL)
        0xe6 => .op_alu_imm(ALU_AND)
        0xe7 => .op_rst(addr: 0x20)
        0xe8 => .op_add_sp_imm()
        0xe9 => .op_jmp_hl()
        0xea => .op_ld_imm_a()

        0xee => .op_alu_imm(ALU_XOR)
        0xef => .op_rst(addr: 0x28)

        // 0xfy
        0xf0 => .op_ld_a_ff00n()
        0xf1 => .op_pop16(Reg::AF)
        0xf2 => .op_ld_a_ff00c()
        0xf3 => .op_di()

        0xf5 => .op_push16(Reg::AF)
        0xf6 => .op_alu_imm(ALU_OR)
        0xf7 => .op_rst(addr: 0x30)
        0xf8 => .op_ld_hl_spn()
        0xf9 => .op_ld_sp_hl()
        0xfa => .op_ld_a_imm16()
        0xfb => .op_ei()

        0xfe => .op_alu_imm(ALU_CP)
        0xff => .op_rst(addr: 0x38)

        else => panic(`Unknown opcode: {opcode:02x}`)
    }
    // println("    A: %02X, BC: %04X, DE: %04X, HL: %04X, SP: %04X, PC: %04X", .regs.a, .regs.bc(), .regs.de(), .regs.hl(), .regs.sp, .regs.pc)
}

def CPU::check_interrupt_type(&this, type: InterruptType, addr: u16): bool {
    let mask = 1u8 << type.bit()
    if (.reg_if & .reg_ie & mask) == 0 {
        return false
    }

    // println("performing interrupt: %s", type)

    .reg_if = .reg_if & ~mask
    .push_r16(Reg::PC)
    .regs.pc = addr
    .clock += 20
    return true
}

def CPU::handle_interrupt(&this) {
    // println("calling handle_interrupt")
    .ime = false
    .halted = false
    if .check_interrupt_type(VBlank, 0x40) return
    if .check_interrupt_type(LCDStat, 0x48) return
    if .check_interrupt_type(Timer, 0x50) return
    if .check_interrupt_type(Serial, 0x58) return
    if .check_interrupt_type(Joypad, 0x60) return
}

def CPU::tick(&this): u64 {
    let prev_clock = .clock
    if .ime and (.reg_ie & .reg_if) != 0 {
        .handle_interrupt()
    } else if .halted {
        .clock += 4
        if .reg_if != 0 {
            .halted = false
        }
    } else {
        .handle_instruction()
    }
    return  .clock - prev_clock
}