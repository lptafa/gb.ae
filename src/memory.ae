
enum MemoryRegion {
    RomBank0
    RomBank1
    CHRRam
    BGMap1
    BGMap2
    CartridgeRam
    RamBank0
    RamBank1to7
    EchoRam
    ObjectAttributeMemory
    Unusable
    IORegisters
    HighRam
    InterruptEnableRegister
}

def MemoryRegion::str(this): string => match this {
    RomBank0 => "ROM Bank 0"
    RomBank1 => "ROM Bank 1 - Switchable"
    CHRRam => "CHR RAM"
    BGMap1 => "BG Map 1"
    BGMap2 => "BG Map 2"
    CartridgeRam => "Cartridge RAM"
    RamBank0 => "RAM Bank 0"
    RamBank1to7 => "RAM Bank 1-7 - switchable - color only"
    EchoRam => "Echo RAM - reserved"
    ObjectAttributeMemory => "Object Attribute Memory"
    Unusable => "Unusable - Reserved"
    IORegisters => "I/O Registers"
    HighRam => "High RAM"
    InterruptEnableRegister => "Interrupt Enable Register"
}

def MemoryRegion::from_address(addr: u16, offset: &u16): MemoryRegion {
    if addr < 0x8000 {
        if offset? then *offset = (addr - 0x0000) as u16
        if addr < 0x4000 {
            return MemoryRegion::RomBank0
        } else {
            return MemoryRegion::RomBank1
        }
    }
    if addr < 0x9800 {
        if offset? then *offset = (addr - 0x8000) as u16
        return MemoryRegion::CHRRam
    }
    if addr < 0x9C00 {
        if offset? then *offset = (addr - 0x9800) as u16
        return MemoryRegion::BGMap1
    }
    if addr < 0xA000 {
        if offset? then *offset = (addr - 0x9C00) as u16
        return MemoryRegion::BGMap2
    }
    if addr < 0xC000 {
        if offset? then *offset = (addr - 0xA000) as u16
        return MemoryRegion::CartridgeRam
    }
    if addr < 0xE000 {
        if offset? then *offset = (addr - 0xC000) as u16
        if addr < 0xD000 {
            return MemoryRegion::RamBank0
        } else {
            return MemoryRegion::RamBank1to7
        }
    }
    if addr < 0xFE00 {
        if offset? then *offset = (addr - 0xE000) as u16
        return MemoryRegion::EchoRam
    }
    if addr < 0xFEA0 {
        if offset? then *offset = (addr - 0xFE00) as u16
        return MemoryRegion::ObjectAttributeMemory
    }
    if addr < 0xFF00 {
        if offset? then *offset = (addr - 0xFEA0) as u16
        return MemoryRegion::Unusable
    }
    if addr < 0xFF80 {
        if offset? then *offset = (addr - 0xFF00) as u16
        return MemoryRegion::IORegisters
    }
    if addr < 0xFFFF {
        if offset? then *offset = (addr - 0xFF80) as u16
        return MemoryRegion::HighRam
    }
    if addr == 0xFFFF {
        if offset? then *offset = 0
        return MemoryRegion::InterruptEnableRegister
    }

    // Should never reach here
    panic(`Invalid address in MemoryRegion::from_address: {addr:04x}`)
}